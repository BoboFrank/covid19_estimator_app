{"version":3,"sources":["components/Form.js","components/App.js","reducers/index.js","reducers/surveyReducer.js","index.js"],"names":["Forms","props","handleBlur","field","evt","setState","touched","state","population","timeToElapse","reportedCases","totalHospitalBeds","periodType","handleInputChange","bind","handleSubmit","validate","event","target","value","name","this","errors","alert","preventDefault","className","Form","FormGroup","row","Label","htmlFor","md","Col","Input","type","id","placeholder","valid","invalid","onBlur","onChange","FormFeedback","size","offset","Button","color","onClick","Component","App","Navbar","dark","NavbarBrand","href","combineReducers","survey","action","store","createStore","reducers","applyMiddleware","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.bb0ba3f0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Form, FormGroup, Label, Input, Col, FormFeedback } from \"reactstrap\";\r\n\r\nclass Forms extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state= {\r\n            population: '',\r\n            timeToElapse: '',\r\n            reportedCases: '',\r\n            totalHospitalBeds: '',\r\n            periodType: '',\r\n            touched: {\r\n                population: false,\r\n                timeToElapse: false,\r\n                reportedCases: false,\r\n                totalHospitalBeds: false,\r\n                periodType: false\r\n            }\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleBlur = this.handleBlur.bind(this);\r\n        this.validate = this.validate.bind(this);\r\n    }\r\n\r\n    handleInputChange(event){\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n    \r\n    handleBlur = (field) => (evt) => {\r\n        this.setState({\r\n            touched: { ...this.state.touched, [field]: true }\r\n        });\r\n    }\r\n    validate(population,timeToElapse, reportedCases, totalHospitalBeds, periodType){\r\n        const errors = {\r\n            population: '',\r\n            timeToElapse: '',\r\n            reportedCases: '',\r\n            totalHospitalBeds: '',\r\n            periodType: ''\r\n        };\r\n\r\n        if(this.state.touched.population && population === '')\r\n            errors.population = 'Population is < 4';\r\n        if(this.state.touched.timeToElapse && timeToElapse === '')\r\n            errors.timeToElapse = 'Population is < 4';\r\n        if(this.state.touched.reportedCases && reportedCases === '')\r\n            errors.reportedCases = 'Population is < 4';\r\n        if(this.state.touched.totalHospitalBeds && totalHospitalBeds === '')\r\n            errors.totalHospitalBeds = 'Population is < 4';\r\n        if(this.state.touched.periodType && periodType === '')\r\n            errors.periodType = 'Population is < 4';\r\n\r\n        return errors;   \r\n    }\r\n    handleSubmit(event){\r\n        if ((this.validate().population && this.validate().timeToElapse && this.validate().reportedCases && this.validate().totalHospitalBeds && this.validate().periodType) === ''){\r\n            alert('Form Submitted');    \r\n        }else{\r\n           alert('Recheck Your Form');\r\n        };\r\n        event.preventDefault();\r\n    }\r\n    render(){\r\n        const errors = this.validate(this.state.population, this.state.timeToElapse, this.state.reportedCases, this.state.totalHospitalBeds, this.state.periodType);\r\n        return (\r\n            <div className='container'>\r\n                <div className='row row-content'>\r\n                    <div className='col-12'>\r\n                        <h3>Send Us Your Data</h3>\r\n                    </div>\r\n                    <div>\r\n                        <Form>\r\n                            <FormGroup row>\r\n                                <Label htmlFor='population' md={2}>Population</Label>\r\n                                <Col md={10}>\r\n                                    <Input type='number' id='population' name='population'\r\n                                    placeholder='Population'\r\n                                    value={this.state.population}\r\n                                    valid={errors.population === ''}\r\n                                    invalid={errors.population !== ''}\r\n                                    onBlur={this.handleBlur('population')}\r\n                                    onChange={this.handleInputChange}\r\n                                    />\r\n                                <FormFeedback>{errors.population}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor='timeToElapse' md={2}>Time To Collect Data</Label>\r\n                                <Col md={10}>\r\n                                    <Input type='number' id='timeToElapse' name='timeToElapse'\r\n                                    placeholder='Time to collect data'\r\n                                    value={this.state.timeToElapse}\r\n                                    valid={errors.timeToElapse === ''}\r\n                                    invalid={errors.timeToElapse !== ''}\r\n                                    onBlur={this.handleBlur('timeToElapse')}\r\n                                    onChange={this.handleInputChange} \r\n                                    />\r\n                                    <FormFeedback>{errors.timeToElapse}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor='reportedCases' md={2}>Reported Cases</Label>\r\n                                <Col md={10}>\r\n                                    <Input type='number' id='reportedCases' name='reportedCases'\r\n                                    placeholder='Reported Cases'\r\n                                    value={this.state.reportedCases}\r\n                                    valid={errors.reportedCases === ''}\r\n                                    invalid={errors.reportedCases !== ''}\r\n                                    onBlur={this.handleBlur('reportedCases')}\r\n                                    onChange={this.handleInputChange} \r\n                                    />\r\n                                    <FormFeedback>{errors.reportedCases}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor='totalHospitalBeds' md={2}>Total Number of Hospital Beds</Label>\r\n                                <Col md={10}>\r\n                                    <Input type='number' id='totalHospitalBeds' name='totalHospitalBeds'\r\n                                    placeholder='Total Number of Hospital Beds'\r\n                                    value={this.state.totalHospitalBeds}\r\n                                    valid={errors.totalHospitalBeds === ''}\r\n                                    invalid={errors.totalHospitalBeds !== ''}\r\n                                    onBlur={this.handleBlur('totalHospitalBeds')}\r\n                                    onChange={this.handleInputChange} \r\n                                    />\r\n                                    <FormFeedback>{errors.totalHospitalBeds}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <Label htmlFor='periodType' md={2}>Type of Period</Label>\r\n                                <Col md={{size: 4, offset: 1}}>\r\n                                        <Input type='select' name='periodType'\r\n                                        value={this.state.periodType}\r\n                                        valid={errors.periodType === ''}\r\n                                        invalid={errors.periodType !== ''}\r\n                                        onBlur={this.handleBlur('periodType')}\r\n                                        onChange={this.handleInputChange}>\r\n                                            <option>Choose...</option>\r\n                                            <option>Days</option>\r\n                                            <option>Weeks</option>\r\n                                            <option>Months</option>\r\n                                        </Input>\r\n                                        <FormFeedback>{errors.periodType}</FormFeedback>\r\n                                </Col>\r\n                            <FormGroup row>\r\n                                <Col md={{size: 10, offset: 2}}>\r\n                                    <Button type='submit' name='Submit Button' color='primary' onClick={this.handleSubmit}>\r\n                                        Send Data\r\n                                    </Button>\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }    \r\n}\r\n\r\nexport default Forms;","import React from 'react';\r\nimport { Navbar, NavbarBrand } from 'reactstrap';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className='App'>\r\n            <Navbar dark color='primary'>\r\n                <div className='container'>\r\n                    <NavbarBrand href='/'>My Nav Bar</NavbarBrand>\r\n                </div>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","import { combineReducers } from 'redux';\r\nimport surveyReducer from './surveyReducer';\r\n\r\nexport default combineReducers({\r\n    survey: surveyReducer\r\n});","export default function (state = {}, action){\r\n    switch(action.type){\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Forms from './components/Form';\r\n\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\n\r\nconst store = createStore (reducers, {}, applyMiddleware())\r\n\r\nReactDOM.render(\r\n    <div>\r\n        <Provider store={store}><App/ ></Provider>\r\n        <div>\r\n            <Forms/>\r\n        </div>\r\n    </div>,\r\n    document.querySelector('#root')\r\n    );"],"sourceRoot":""}